# -*- coding: utf-8 -*-
"""Handle_missing_values_exam_jun5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/160Z1vOFWhsH5VC6Noq-Bz226yjOQeTyR
"""

# Commented out IPython magic to ensure Python compatibility.
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
sns.set()

df = pd.read_csv("/content/sales_data_sample.csv", encoding = 'ISO-8859-1')

df.head()

df.shape

df.info()

df.dtypes

"""# **CHECK FOR NULL VALUES OR MISSING DATA**

---


"""

df.isnull().any()

"""There are null values in ADDRESSLINE2,STATE,POSTALCODE,TERRITORY."""

df.isnull().sum()

"""# **FIND PERCENTAGE OF NULL VALUES**

---


"""

df.isnull().sum()*100/len(df)

"""Here the value or percentage of missing data is more at ADDRESSLINE2(89.3%) , STATE (52.63%),POSTALCODE(2.6%), TERRITORY(38.044%)"""

!pip install missingno

import missingno as msno
msno.matrix(df)
plt.show()

msno.heatmap(df)
plt.show()

"""# **Bar chart**

---


"""

msno.bar(df)

"""HERE WE CAN SEE ECH COLUMN CONTAIN HOW MANY MISSING VALUES."""

msno.heatmap(df)
plt.show()

"""# **Missing value dendrogram**

---


"""

msno.dendrogram(df)
plt.show()

"""# **DETECT OUTLIERS FOR NUMERICAL VALUES USING BOXPLOT**"""

# Boxplot for POSTALCODE (numeric column)
plt.figure(figsize=(8, 6))
sns.boxplot(y='MSRP', data=df)
plt.title('Boxplot of MSRP')
plt.show()

# Function to plot boxplot for a given column
def boxplot(col):
    sns.boxplot(y=df[col])
    plt.title(f'Boxplot of {col}')
    plt.show()

numeric_columns = df.select_dtypes(include = [np.number]).columns
for col in numeric_columns:
  boxplot(col)

"""There are outliers.

METHODS TO HANDLE MISSING VALUES:
IT ALL DEPENDS ON THE NATURE OF DATA SET IE BY UNDERSTANDING DATA WHETHER ITS
NUMERICAL OR
CATEGORICAL
EXPLORING MISSING DATA PATTERN
USING DESCRIPTIVE ANALYSIS OR STATISTICAL SUMMARY
FINDING OUTLIERS-IF OUTLIERS ARE MORE WE PREFER MEDIAN IMPUTATION


THERE ARE SEVERAL METHODS TO HANDLE MISSING VALUES

# **1:FOR NUMERICAL DATA **

---

1: USE MEAN,OR MEDIAN IMPUTATION TO FILL THE NULL VALUES
2 : REGRESSION IMPUTAION -USING REGRESSIVE METHODS BASED ON MODEL TO FILL NULL VALUES
3:KNN IMPUTATION - FILL NULL VALUES BASED ON NEAREST NEIGHBOURS.

# **2A: FOR CATEGORICAL DATA **

---
1: USE MODE IMPUTATION-FILL NULL VALUES USING MODE(MOST FREQUENT VALUES)
2 : PREDICTIVE MODELLING USING CLASSIFICATION ALGORITHMS
      IE KNN IMPUTATION-(K NEAREST NEIGHBOURS) BASED ON SIMILARITY OF INSTANCE
3: MULTIPLE IMPUTATION

4: USING BACKWARD FILL /FORWARD FILL OR COMBINING BOTH THE TECHNIQUES:THIS IS USED TO GET THE NULL VALUES FILLED WITH THE ADJACENT VALUES IE JUST ABOVE(BACKWARD) VALUE OR BELOW VALUE(FORWARD) IS TAKEN AND THE NULL VALUES ARE FILLED BASED ON IT
"""

df.dtypes

"""Here some are categorical ie all the variables with null are categorical so i go for combining both backward and forward fill"""

# Summary statistics of numerical features
print("Summary Statistics:")
# Customize the appearance using a color palette
styled_summary = df.describe().T.style.background_gradient(cmap="Set1")

# Display the styled summary
styled_summary

from datetime import datetime

# Correct the format string to match the data format
df['ORDERDATE'] = df['ORDERDATE'].apply(lambda x: datetime.strptime(x, '%m/%d/%Y %H:%M'))

# Verify the transformation
print(df['ORDERDATE'].head())

df

columns_to_fill = ['ADDRESSLINE2', 'STATE', 'POSTALCODE', 'TERRITORY']

df[columns_to_fill] = df[columns_to_fill].fillna(method = 'ffill').fillna(method ='bfill')

print(df[columns_to_fill].isnull().sum())

"""NOW THERE ARE NO NULL VALUES"""

df.isnull().sum()

df

df.dtypes

"""# **DATA VISULAISATION**

---


"""

plt.figure(figsize=(10,8))
sns.countplot(x= 'ADDRESSLINE2', data = df, palette = 'viridis')
plt.title('Distribution of ADDRESSLINE2 (Excluding Missing Values-After Imputation)')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(10,8))
sns.countplot(x= 'POSTALCODE', data = df, palette = 'viridis')
plt.title('Distribution of POSTAL CODE (Excluding Missing Values-After Imputation)')
plt.xticks(rotation=95)
plt.show()

plt.figure(figsize=(10,8))
sns.countplot(x= 'STATE', data = df, palette = 'viridis')
plt.title('Distribution of STATE (Excluding Missing Values-After Imputation)')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(10,8))
sns.countplot(x= 'TERRITORY', data = df, palette = 'viridis')
plt.title('Distribution of TERRITORY (Excluding Missing Values-After Imputation)')
plt.xticks(rotation=45)
plt.show()

"""# **draw bar chart**

---


"""

df

df.columns

sns.bar

# Columns of the dataframe
columns = ['ORDERNUMBER', 'QUANTITYORDERED', 'PRICEEACH', 'ORDERLINENUMBER',
           'SALES', 'ORDERDATE', 'STATUS', 'QTR_ID', 'MONTH_ID', 'YEAR_ID',
           'PRODUCTLINE', 'MSRP', 'PRODUCTCODE', 'CUSTOMERNAME', 'PHONE',
           'ADDRESSLINE1', 'ADDRESSLINE2', 'CITY', 'STATE', 'POSTALCODE',
           'COUNTRY', 'TERRITORY', 'CONTACTLASTNAME', 'CONTACTFIRSTNAME',
           'DEALSIZE']

# Create a pie chart
plt.figure(figsize=(10, 7))
plt.pie([1] * len(columns), labels=columns, autopct='%1.1f%%', startangle=140)
plt.title('Distribution of Dataframe Columns')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

columns = ['ORDERNUMBER', 'QUANTITYORDERED', 'PRICEEACH', 'ORDERLINENUMBER',
           'SALES', 'ORDERDATE', 'STATUS', 'QTR_ID', 'MONTH_ID', 'YEAR_ID',
           'PRODUCTLINE', 'MSRP', 'PRODUCTCODE', 'CUSTOMERNAME', 'PHONE',
           'ADDRESSLINE1', 'ADDRESSLINE2', 'CITY', 'STATE', 'POSTALCODE',
           'COUNTRY', 'TERRITORY', 'CONTACTLASTNAME', 'CONTACTFIRSTNAME',
           'DEALSIZE']

# Create a bar plot
plt.figure(figsize=(12, 8))
plt.bar(columns, [1] * len(columns))
plt.xlabel('Column Names')
plt.ylabel('Frequency')
plt.title('Frequency of Dataframe Columns')
plt.xticks(rotation=90)
plt.show()

# Columns of the dataframe
columns = ['ORDERNUMBER', 'QUANTITYORDERED', 'PRICEEACH', 'ORDERLINENUMBER',
           'SALES', 'ORDERDATE', 'STATUS', 'QTR_ID', 'MONTH_ID', 'YEAR_ID',
           'PRODUCTLINE', 'MSRP', 'PRODUCTCODE', 'CUSTOMERNAME', 'PHONE',
           'ADDRESSLINE1', 'ADDRESSLINE2', 'CITY', 'STATE', 'POSTALCODE',
           'COUNTRY', 'TERRITORY', 'CONTACTLASTNAME', 'CONTACTFIRSTNAME',
           'DEALSIZE']

# Create a line plot
plt.figure(figsize=(12, 8))
plt.plot(columns, [1] * len(columns), marker='o')
plt.xlabel('Column Names')
plt.ylabel('Frequency')
plt.title('Frequency of Dataframe Columns')
plt.xticks(rotation=90)
plt.show()

"""What's the use of pandas, numpy, seaborn, matplotlib, OS library in python?

pandas - used for data manipulation and anallysis ,used for handling missing values,data cleaning, data transformation

numpy - used for numerical computation, mathematical operation, data analysis.

seaborn - Data visualisation library, based on matplotlib

Matplotlib - Data visualisation library used for creating various plots and charts

os -Library for interacting with operating system, used for file management and process management.
"""